<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btn.Add" xml:space="preserve">
    <value>파일 추가</value>
  </data>
  <data name="btn.NewPart" xml:space="preserve">
    <value>새로운 부분을 추가</value>
  </data>
  <data name="btn.Delete" xml:space="preserve">
    <value>파일 삭제</value>
  </data>
  <data name="btn.Show" xml:space="preserve">
    <value>세부 사항을 표시</value>
  </data>
  <data name="btn.Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="i.form" xml:space="preserve">
    <value>새로운 부분을 함.</value>
  </data>
  <data name="lb1" xml:space="preserve">
    <value>Part Family</value>
  </data>
  <data name="lb2" xml:space="preserve">
    <value>Part Name</value>
  </data>
  <data name="lb7" xml:space="preserve">
    <value>Template Description</value>
  </data>
  <data name="lb8" xml:space="preserve">
    <value>File Attachment</value>
  </data>
  <data name="note1" xml:space="preserve">
    <value>힌트 : [파트 이름]은 모델과 기능을 기록해야합니다.
설명은 가방 크기로 작성해야합니다.</value>
  </data>
  <data name="note2" xml:space="preserve">
    <value>파일 유형 : .jpg, .pdf, .dwg, .dxf, .stp, .step, .iegs</value>
  </data>
  <data name="note3" xml:space="preserve">
    <value>파일을 첨부 된 파일 목록으로 끌어 낼 수 있습니다.</value>
  </data>
  <data name="lb9" xml:space="preserve">
    <value>Part Material</value>
  </data>
  <data name="lb10" xml:space="preserve">
    <value>Part Description</value>
  </data>
  <data name="t0" xml:space="preserve">
    <value>주의</value>
  </data>
  <data name="t1" xml:space="preserve">
    <value>목록 자료를로드 할 수 없습니다.</value>
  </data>
  <data name="t2" xml:space="preserve">
    <value>탭을 닫고 싶습니까?</value>
  </data>
  <data name="t3" xml:space="preserve">
    <value>Have 1 file with this extension</value>
  </data>
  <data name="t7" xml:space="preserve">
    <value>실패 : 데이터베이스에 새로운 에코를 작성하십시오</value>
  </data>
  <data name="t10" xml:space="preserve">
    <value>오류 !!!. 정보를 다시 확인하십시오.</value>
  </data>
  <data name="t9" xml:space="preserve">
    <value>새 부분을 만들 수 없습니다</value>
  </data>
  <data name="t8" xml:space="preserve">
    <value>Fail : Wrire Part Log to Database</value>
  </data>
  <data name="t6" xml:space="preserve">
    <value>새로운 부품을 성공적으로 만듭니다</value>
  </data>
  <data name="t5" xml:space="preserve">
    <value>추가 : </value>
  </data>
  <data name="t4" xml:space="preserve">
    <value>Total Character of Material &lt; 20</value>
  </data>
  <data name="t11" xml:space="preserve">
    <value>삭제할 행을 선택하십시오</value>
  </data>
</root>